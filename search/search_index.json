{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome About Izuku Izuku is a simple, fast, and powerful tabular data representation and manipulation library written in TypeScript . It is designed to be used to view, manipulate and debug 2D data in NodeJS applications. The core of Izuku is the Frame class that represents a 2D array of data. It is designed to be used as a data structure for tabular data. Izuku is heavily inspired by Pandas . Note : Izuku is not a replacement for Pandas and should not be used for data analysis. It is designed to be used for data visualization and debugging. It can, however, handle large datasets and help you understand your data better but comes at some cost in performance. Since, Pandas is based on NumPy, and NumPy is written in C, Pandas would be much faster than Izuku. To get started, read the Getting Started section. Cloning and Building Izuku Cloning and Building is helpful for local development. You can clone Izuku from the GitHub repository . To build Izuku, you will need to install the TypeScript compiler . To clone the repository, run the following command in your terminal: git clone https://github.com/luciferreeves/izuku.js.git Change into the directory and run the following command to install dependencies: npm install To build Izuku, run the following command: npm run build To run tests, run the following command: npm test Contributing You can contribute to Izuku by making a pull request on the GitHub repository . Take a look at the CONTRIBUTING.md file for more information on how to contribute. Code of Conduct You can view the Code of Conduct for Izuku. Code of Conduct is a pledge to conduct yourself in a manner that is respectful to the community. It is also a guideline for how to behave in the community. Here's an extract from Code of Conduct : We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Licensing Any contributions you make will be under the MIT License. In short, when you submit code changes, your submissions are understood to be under the same MIT License that covers the project. Feel free to contact the maintainers if that's a concern.","title":"Home"},{"location":"#welcome","text":"","title":"Welcome"},{"location":"#about-izuku","text":"Izuku is a simple, fast, and powerful tabular data representation and manipulation library written in TypeScript . It is designed to be used to view, manipulate and debug 2D data in NodeJS applications. The core of Izuku is the Frame class that represents a 2D array of data. It is designed to be used as a data structure for tabular data. Izuku is heavily inspired by Pandas . Note : Izuku is not a replacement for Pandas and should not be used for data analysis. It is designed to be used for data visualization and debugging. It can, however, handle large datasets and help you understand your data better but comes at some cost in performance. Since, Pandas is based on NumPy, and NumPy is written in C, Pandas would be much faster than Izuku. To get started, read the Getting Started section.","title":"About Izuku"},{"location":"#cloning-and-building-izuku","text":"Cloning and Building is helpful for local development. You can clone Izuku from the GitHub repository . To build Izuku, you will need to install the TypeScript compiler . To clone the repository, run the following command in your terminal: git clone https://github.com/luciferreeves/izuku.js.git Change into the directory and run the following command to install dependencies: npm install To build Izuku, run the following command: npm run build To run tests, run the following command: npm test","title":"Cloning and Building Izuku"},{"location":"#contributing","text":"You can contribute to Izuku by making a pull request on the GitHub repository . Take a look at the CONTRIBUTING.md file for more information on how to contribute.","title":"Contributing"},{"location":"#code-of-conduct","text":"You can view the Code of Conduct for Izuku. Code of Conduct is a pledge to conduct yourself in a manner that is respectful to the community. It is also a guideline for how to behave in the community. Here's an extract from Code of Conduct : We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.","title":"Code of Conduct"},{"location":"#licensing","text":"Any contributions you make will be under the MIT License. In short, when you submit code changes, your submissions are understood to be under the same MIT License that covers the project. Feel free to contact the maintainers if that's a concern.","title":"Licensing"},{"location":"chaining-methods/","text":"Chaining Methods Since, the row and column methods return a new frame, you can chain them together to get the data of multiple rows and columns. The following example shows how to get the data of multiple rows and columns. The returned data is also a new frame and you can continue chaining other frame methods on it. const data = [[...], [...], ...]; const header = [...]; const frame = new Frame ( data , header ); // 1. get multiple rows on Index 2 and 3 // 2. then get the 'Name' and 'Age' columns of those rows // 3. finally print the data frame . row ([ 2 , 3 ]). column ([ 'Name' , 'Age' ]). show ();","title":"Chaining Methods"},{"location":"chaining-methods/#chaining-methods","text":"Since, the row and column methods return a new frame, you can chain them together to get the data of multiple rows and columns. The following example shows how to get the data of multiple rows and columns. The returned data is also a new frame and you can continue chaining other frame methods on it. const data = [[...], [...], ...]; const header = [...]; const frame = new Frame ( data , header ); // 1. get multiple rows on Index 2 and 3 // 2. then get the 'Name' and 'Age' columns of those rows // 3. finally print the data frame . row ([ 2 , 3 ]). column ([ 'Name' , 'Age' ]). show ();","title":"Chaining Methods"},{"location":"frame-methods/","text":"Frame Methods There are some methods attached to the frame class. You can tap into those methods by using the dot (.) notation. Most of the methods are chainable . data() The data() method is used to modify the data in the frame. It takes the same data argument as the constructor \u2013 which is an array of arrays. Note: If you use data method without passing any argument, it will simply return the frame. const data = [[...], [...], ...]; const frame = new Frame (); frame . data ( data ); // modify the data const newData = [[...], [...], [...], [...], ...]; frame . data ( newData ); header() The header() method is used to modify the column names in the frame. It takes the same header argument as the constructor \u2013 which is an array of strings. Note: If you use header method without passing any argument, it will reset the column names to default header (Remember: header is optional). // modify the header const newHeader = [...]; frame . header ( newHeader ); // Reset the header to default frame . header (); // You can use any empty value to reset the header to default, for example: // frame.header(''); // frame.header(null); // frame.header(undefined); // frame.header([]); title() The title() method is used to modify the title of the frame. Title is optional. Note: If you use title method without passing any argument, it will reset the title to default title (Remember: title is optional). // modify the title const newTitle = 'New Title' ; frame . title ( newTitle ); // Reset the title to default frame . title (); column() The column() method is used to get the column data of a particular column. It takes the column name or the index as an argument. It can also take an array of column names or indexes as an argument to get multiple columns. The column() method returns a new frame with extracted column data as the data of the frame. You can chain other frame methods on the returned frame. Get a single column // get a single column on Index 2 (Index starts from 0) const column = frame . column ( 2 ); // Alternatively, you can use the column name const column = frame . column ( 'Name' ); // print the column column . show (); Get multiple columns // get multiple columns on Index 2 and 3 (Index starts from 0) const columns = frame . column ([ 2 , 3 ]); // Alternatively, you can use the column names const columns = frame . column ([ 'Name' , 'Age' ]); // print the columns columns . show (); row() The row() method is used to get the row data of a particular row. It takes the row index as an argument. It can also take an array of row indexes as an argument to get multiple rows. The row() method returns a new frame with extracted row data as the data of the frame. You can chain other frame methods on the returned frame. Get a single row // get a single row on Index 2 (Index starts from 0) const row = frame . row ( 2 ); // print the row row . show (); Get multiple rows // get multiple rows on Index 2 and 3 (Index starts from 0) const rows = frame . row ([ 2 , 3 ]); // print the rows rows . show (); fromJSON() The fromJSON() method is used to create a frame from a JSON object. It takes the JSON object as an argument. fromJSON() method returns a new frame. You can chain other frame methods on the returned frame. Note: The fromJSON() method does not take nested JSON objects as an argument. If you have a nested JSON object, flatten it using the flattenJSON() helper function first. const json = [{...}, {...}, ...]; const frame = new Frame (). fromJSON ( json ); // ...continue with other frame methods fromCSV() The fromCSV() method is used to create a frame from a CSV string. It takes the CSV string as an argument. fromCSV() method returns a new frame. You can chain other frame methods on the returned frame. Note: The fromCSV() automatically assigns the column names from the first row of the CSV string. If you do not want to use the column names, you can use the header() method to assign the column names first. const path = require ( 'path' ); const csvPath = path . join ( __dirname , 'data.csv' ); // Sets the column names from the first row of the CSV const frame = new Frame (). fromCSV ( csvPath ); // Define the column names manually const headers = [...]; // Set the header first (important) then read the CSV const frame = new Frame (). header ( headers ). fromCSV ( csvPath ); find() The find() method is used to find the rows that match the given condition. It takes a string or a number as an argument which is needed to be found in the frame. Optionally, it also takes an options object as as the second argument. The valid options are defined below: row : The row index to seach in. Can also be an array of row indexes. column : The column name or index to search in. Can also be an array of column names or indexes. strict : If true , the search will be performed on the exact value. If false , the search will be performed on the value as a substring. Default is false . Hint : You can also combine the range() helper method to pass a range of rows or columns. // find all the rows with value 'John' in column 'Name' const row = frame . find ( 'John' , { column : 'Name' }); // find all the rows with value 'John' in columns 0, 1 and 2. Perform a strict search const row = frame . find ( 'John' , { column : [ 0 , 1 , 2 ], strict : true }); // find all the rows with value 'John' in columns 0, 1 and 2 and rows 3, 4 and 5. // Perform a non-strict search const row = frame . find ( 'John' , { column : [ 0 , 1 , 2 ], row : [ 3 , 4 , 5 ], strict : false }); sort() The sort() method is used to sort the rows in the frame. It takes the column name or the index as an argument. It also takes an optional ascending or descending argument to sort the rows in ascending or descending order. Default is ascending . Note : sort() method permanently modifies the frame. You can chain other frame methods on the returned frame. // sort the rows in the frame with column 'Name' frame . sort ( 'Name' ); // sort the rows in the frame with column 'Name' in descending order frame . sort ( 'Name' , 'descending' ); // sort the rows in the frame with column index 0 in ascending order frame . sort ( 0 , 'ascending' ); removeDuplicates() The removeDuplicates() method is used to remove duplicate rows from the frame. It takes a column argument to remove duplicate rows based on the value in the column. column : The column name or index to remove duplicate rows based on the value in the column. Note : removeDuplicates() permanently modifies the frame. You can chain other frame methods on the returned frame. // remove duplicate rows based on the value in column 'Name' frame . removeDuplicates ( 'Name' ); // remove duplicate rows based on the value in column index 0 frame . removeDuplicates ( 0 ); head() The head() method is used to get the first n rows of the frame. It takes the number of rows as an argument. If no argument is passed, it will return the first 5 rows. If the argument is greater than the number of rows in the frame, it will return the entire frame. head() is a print method and it does not return a new frame and therefore it is not chainable. // get the first 5 rows frame . head (); // get the first 10 rows frame . head ( 10 ); tail() The tail() method is used to get the last n rows of the frame. It takes the number of rows as an argument. If no argument is passed, it will return the last 5 rows. If the argument is greater than the number of rows in the frame, it will return the entire frame. tail() is a print method and it does not return a new frame and therefore it is not chainable. // get the last 5 rows frame . tail (); // get the last 10 rows frame . tail ( 10 ); show() The show() method is used to print the frame. It takes no argument. show() is a print method and it does not return a new frame and therefore it is not chainable. // print the frame frame . show (); showAll() The showAll() method is used to print the frame with all the rows. It takes no argument. showAll() is a print method and it does not return a new frame and therefore it is not chainable. // print the frame with all the rows frame . showAll (); info() The info() method is used to print the frame information. It takes no argument. info() is a print method and it does not return a new frame and therefore it is not chainable. // print the frame information frame . info (); If you run the info() method on the frame with data defined in the Getting Started Section , it will print the following information: RangeIndex: 35 elements, 0 to 34 Shape: 9 rows, 4 columns \u2554\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 # \u2502 Column Name \u2502 Types \u2502 Empty Values \u2551 \u255f\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 0 \u2502 Name \u2502 string \u2502 false \u2551 \u255f\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 1 \u2502 Age \u2502 number,object \u2502 true \u2551 \u255f\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 2 \u2502 Gender \u2502 string \u2502 false \u2551 \u255f\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 3 \u2502 Country \u2502 string,undefined \u2502 true \u2551 \u255a\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d Data Types: string(26), number(8), object(1), undefined(1) Memory Usage: 550 bytes rangeIndex() The rangeIndex() method is used to get the element at a particular index if the complete data was flattened. It takes an index as an argument. Index is zero-based. rangeIndex() does not return a new frame and therefore it is not chainable. It returns the element at the index and therefore a console.log is required to print the element. // get the element at index 2 console . log ( frame . rangeIndex ( 2 )); There are some helper methods which will make your workflow easier. Take a look at the Helper Methods section. toJSON() The toJSON() method is used to convert the frame to a JSON file. It takes an optional path as an argument. If no argument is passed, it will save the JSON file in the current directory. It also takes an optional file name as an argument. If no argument is passed, it will save the JSON file with the name data.json . // save the frame as a JSON file frame . toJSON (); // save the frame as a JSON file with the name 'frame.json' in the current directory frame . toJSON ( undefined , 'frame.json' ); // save the frame as a JSON file with the name 'data.json' in the directory './data' frame . toJSON ( './data' , 'data.json' ); toCSV() The toCSV() method is used to convert the frame to a CSV file. It takes an optional path as an argument. If no argument is passed, it will save the CSV file in the current directory. It also takes an optional file name as an argument. If no argument is passed, it will save the CSV file with the name data.csv . // save the frame as a CSV file frame . toCSV (); // save the frame as a CSV file with the name 'frame.csv' in the current directory frame . toCSV ( undefined , 'frame.csv' ); // save the frame as a CSV file with the name 'data.csv' in the directory './data' frame . toCSV ( './data' , 'data.csv' );","title":"Frame Methods"},{"location":"frame-methods/#frame-methods","text":"There are some methods attached to the frame class. You can tap into those methods by using the dot (.) notation. Most of the methods are chainable .","title":"Frame Methods"},{"location":"frame-methods/#data","text":"The data() method is used to modify the data in the frame. It takes the same data argument as the constructor \u2013 which is an array of arrays. Note: If you use data method without passing any argument, it will simply return the frame. const data = [[...], [...], ...]; const frame = new Frame (); frame . data ( data ); // modify the data const newData = [[...], [...], [...], [...], ...]; frame . data ( newData );","title":"data()"},{"location":"frame-methods/#header","text":"The header() method is used to modify the column names in the frame. It takes the same header argument as the constructor \u2013 which is an array of strings. Note: If you use header method without passing any argument, it will reset the column names to default header (Remember: header is optional). // modify the header const newHeader = [...]; frame . header ( newHeader ); // Reset the header to default frame . header (); // You can use any empty value to reset the header to default, for example: // frame.header(''); // frame.header(null); // frame.header(undefined); // frame.header([]);","title":"header()"},{"location":"frame-methods/#title","text":"The title() method is used to modify the title of the frame. Title is optional. Note: If you use title method without passing any argument, it will reset the title to default title (Remember: title is optional). // modify the title const newTitle = 'New Title' ; frame . title ( newTitle ); // Reset the title to default frame . title ();","title":"title()"},{"location":"frame-methods/#column","text":"The column() method is used to get the column data of a particular column. It takes the column name or the index as an argument. It can also take an array of column names or indexes as an argument to get multiple columns. The column() method returns a new frame with extracted column data as the data of the frame. You can chain other frame methods on the returned frame.","title":"column()"},{"location":"frame-methods/#get-a-single-column","text":"// get a single column on Index 2 (Index starts from 0) const column = frame . column ( 2 ); // Alternatively, you can use the column name const column = frame . column ( 'Name' ); // print the column column . show ();","title":"Get a single column"},{"location":"frame-methods/#get-multiple-columns","text":"// get multiple columns on Index 2 and 3 (Index starts from 0) const columns = frame . column ([ 2 , 3 ]); // Alternatively, you can use the column names const columns = frame . column ([ 'Name' , 'Age' ]); // print the columns columns . show ();","title":"Get multiple columns"},{"location":"frame-methods/#row","text":"The row() method is used to get the row data of a particular row. It takes the row index as an argument. It can also take an array of row indexes as an argument to get multiple rows. The row() method returns a new frame with extracted row data as the data of the frame. You can chain other frame methods on the returned frame.","title":"row()"},{"location":"frame-methods/#get-a-single-row","text":"// get a single row on Index 2 (Index starts from 0) const row = frame . row ( 2 ); // print the row row . show ();","title":"Get a single row"},{"location":"frame-methods/#get-multiple-rows","text":"// get multiple rows on Index 2 and 3 (Index starts from 0) const rows = frame . row ([ 2 , 3 ]); // print the rows rows . show ();","title":"Get multiple rows"},{"location":"frame-methods/#fromjson","text":"The fromJSON() method is used to create a frame from a JSON object. It takes the JSON object as an argument. fromJSON() method returns a new frame. You can chain other frame methods on the returned frame. Note: The fromJSON() method does not take nested JSON objects as an argument. If you have a nested JSON object, flatten it using the flattenJSON() helper function first. const json = [{...}, {...}, ...]; const frame = new Frame (). fromJSON ( json ); // ...continue with other frame methods","title":"fromJSON()"},{"location":"frame-methods/#fromcsv","text":"The fromCSV() method is used to create a frame from a CSV string. It takes the CSV string as an argument. fromCSV() method returns a new frame. You can chain other frame methods on the returned frame. Note: The fromCSV() automatically assigns the column names from the first row of the CSV string. If you do not want to use the column names, you can use the header() method to assign the column names first. const path = require ( 'path' ); const csvPath = path . join ( __dirname , 'data.csv' ); // Sets the column names from the first row of the CSV const frame = new Frame (). fromCSV ( csvPath ); // Define the column names manually const headers = [...]; // Set the header first (important) then read the CSV const frame = new Frame (). header ( headers ). fromCSV ( csvPath );","title":"fromCSV()"},{"location":"frame-methods/#find","text":"The find() method is used to find the rows that match the given condition. It takes a string or a number as an argument which is needed to be found in the frame. Optionally, it also takes an options object as as the second argument. The valid options are defined below: row : The row index to seach in. Can also be an array of row indexes. column : The column name or index to search in. Can also be an array of column names or indexes. strict : If true , the search will be performed on the exact value. If false , the search will be performed on the value as a substring. Default is false . Hint : You can also combine the range() helper method to pass a range of rows or columns. // find all the rows with value 'John' in column 'Name' const row = frame . find ( 'John' , { column : 'Name' }); // find all the rows with value 'John' in columns 0, 1 and 2. Perform a strict search const row = frame . find ( 'John' , { column : [ 0 , 1 , 2 ], strict : true }); // find all the rows with value 'John' in columns 0, 1 and 2 and rows 3, 4 and 5. // Perform a non-strict search const row = frame . find ( 'John' , { column : [ 0 , 1 , 2 ], row : [ 3 , 4 , 5 ], strict : false });","title":"find()"},{"location":"frame-methods/#sort","text":"The sort() method is used to sort the rows in the frame. It takes the column name or the index as an argument. It also takes an optional ascending or descending argument to sort the rows in ascending or descending order. Default is ascending . Note : sort() method permanently modifies the frame. You can chain other frame methods on the returned frame. // sort the rows in the frame with column 'Name' frame . sort ( 'Name' ); // sort the rows in the frame with column 'Name' in descending order frame . sort ( 'Name' , 'descending' ); // sort the rows in the frame with column index 0 in ascending order frame . sort ( 0 , 'ascending' );","title":"sort()"},{"location":"frame-methods/#removeduplicates","text":"The removeDuplicates() method is used to remove duplicate rows from the frame. It takes a column argument to remove duplicate rows based on the value in the column. column : The column name or index to remove duplicate rows based on the value in the column. Note : removeDuplicates() permanently modifies the frame. You can chain other frame methods on the returned frame. // remove duplicate rows based on the value in column 'Name' frame . removeDuplicates ( 'Name' ); // remove duplicate rows based on the value in column index 0 frame . removeDuplicates ( 0 );","title":"removeDuplicates()"},{"location":"frame-methods/#head","text":"The head() method is used to get the first n rows of the frame. It takes the number of rows as an argument. If no argument is passed, it will return the first 5 rows. If the argument is greater than the number of rows in the frame, it will return the entire frame. head() is a print method and it does not return a new frame and therefore it is not chainable. // get the first 5 rows frame . head (); // get the first 10 rows frame . head ( 10 );","title":"head()"},{"location":"frame-methods/#tail","text":"The tail() method is used to get the last n rows of the frame. It takes the number of rows as an argument. If no argument is passed, it will return the last 5 rows. If the argument is greater than the number of rows in the frame, it will return the entire frame. tail() is a print method and it does not return a new frame and therefore it is not chainable. // get the last 5 rows frame . tail (); // get the last 10 rows frame . tail ( 10 );","title":"tail()"},{"location":"frame-methods/#show","text":"The show() method is used to print the frame. It takes no argument. show() is a print method and it does not return a new frame and therefore it is not chainable. // print the frame frame . show ();","title":"show()"},{"location":"frame-methods/#showall","text":"The showAll() method is used to print the frame with all the rows. It takes no argument. showAll() is a print method and it does not return a new frame and therefore it is not chainable. // print the frame with all the rows frame . showAll ();","title":"showAll()"},{"location":"frame-methods/#info","text":"The info() method is used to print the frame information. It takes no argument. info() is a print method and it does not return a new frame and therefore it is not chainable. // print the frame information frame . info (); If you run the info() method on the frame with data defined in the Getting Started Section , it will print the following information: RangeIndex: 35 elements, 0 to 34 Shape: 9 rows, 4 columns \u2554\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 # \u2502 Column Name \u2502 Types \u2502 Empty Values \u2551 \u255f\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 0 \u2502 Name \u2502 string \u2502 false \u2551 \u255f\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 1 \u2502 Age \u2502 number,object \u2502 true \u2551 \u255f\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 2 \u2502 Gender \u2502 string \u2502 false \u2551 \u255f\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 3 \u2502 Country \u2502 string,undefined \u2502 true \u2551 \u255a\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d Data Types: string(26), number(8), object(1), undefined(1) Memory Usage: 550 bytes","title":"info()"},{"location":"frame-methods/#rangeindex","text":"The rangeIndex() method is used to get the element at a particular index if the complete data was flattened. It takes an index as an argument. Index is zero-based. rangeIndex() does not return a new frame and therefore it is not chainable. It returns the element at the index and therefore a console.log is required to print the element. // get the element at index 2 console . log ( frame . rangeIndex ( 2 )); There are some helper methods which will make your workflow easier. Take a look at the Helper Methods section.","title":"rangeIndex()"},{"location":"frame-methods/#tojson","text":"The toJSON() method is used to convert the frame to a JSON file. It takes an optional path as an argument. If no argument is passed, it will save the JSON file in the current directory. It also takes an optional file name as an argument. If no argument is passed, it will save the JSON file with the name data.json . // save the frame as a JSON file frame . toJSON (); // save the frame as a JSON file with the name 'frame.json' in the current directory frame . toJSON ( undefined , 'frame.json' ); // save the frame as a JSON file with the name 'data.json' in the directory './data' frame . toJSON ( './data' , 'data.json' );","title":"toJSON()"},{"location":"frame-methods/#tocsv","text":"The toCSV() method is used to convert the frame to a CSV file. It takes an optional path as an argument. If no argument is passed, it will save the CSV file in the current directory. It also takes an optional file name as an argument. If no argument is passed, it will save the CSV file with the name data.csv . // save the frame as a CSV file frame . toCSV (); // save the frame as a CSV file with the name 'frame.csv' in the current directory frame . toCSV ( undefined , 'frame.csv' ); // save the frame as a CSV file with the name 'data.csv' in the directory './data' frame . toCSV ( './data' , 'data.csv' );","title":"toCSV()"},{"location":"frame-properties/","text":"Frame Properties There are some properties attached to the frame class. You can tap into those properties by using the dot (.) notation. Note: Frame methods are not available on the properties. You need to console.log(propertyName) to see the property values. rowdata The rowdata property is an array of arrays that represents the data in the frame. Note: The rowdata property is read-only. If you want to modify the data in the frame, you can use the data() method. const rowdata = frame . rowdata ; console . log ( rowdata ); // prints \"data\" array columns The columns property is an array of strings that represents the column names in the frame. Note: The columns property is read-only. If you want to modify the column names in the frame, you can use the header() method. const columns = frame . columns ; console . log ( columns ); // prints \"header\" array size The size property gives the number of elements present in the frame. Note: The size property is read-only and is automatically generated when the frame is created. Size can change if data is modified. const size = frame . size ; console . log ( size ); // prints size. ex: 9 shape The shape property gives the number of rows and columns present in the frame. Note: The shape property is read-only and is automatically generated when the frame is created. Shape can change if data is modified. const shape = frame . shape ; console . log ( shape ); // prints shape. ex: 9 x 4 Now that you have a frame, you can use the frame methods to manipulate the data. Take a look at the frame methods .","title":"Frame Properties"},{"location":"frame-properties/#frame-properties","text":"There are some properties attached to the frame class. You can tap into those properties by using the dot (.) notation. Note: Frame methods are not available on the properties. You need to console.log(propertyName) to see the property values.","title":"Frame Properties"},{"location":"frame-properties/#rowdata","text":"The rowdata property is an array of arrays that represents the data in the frame. Note: The rowdata property is read-only. If you want to modify the data in the frame, you can use the data() method. const rowdata = frame . rowdata ; console . log ( rowdata ); // prints \"data\" array","title":"rowdata"},{"location":"frame-properties/#columns","text":"The columns property is an array of strings that represents the column names in the frame. Note: The columns property is read-only. If you want to modify the column names in the frame, you can use the header() method. const columns = frame . columns ; console . log ( columns ); // prints \"header\" array","title":"columns"},{"location":"frame-properties/#size","text":"The size property gives the number of elements present in the frame. Note: The size property is read-only and is automatically generated when the frame is created. Size can change if data is modified. const size = frame . size ; console . log ( size ); // prints size. ex: 9","title":"size"},{"location":"frame-properties/#shape","text":"The shape property gives the number of rows and columns present in the frame. Note: The shape property is read-only and is automatically generated when the frame is created. Shape can change if data is modified. const shape = frame . shape ; console . log ( shape ); // prints shape. ex: 9 x 4 Now that you have a frame, you can use the frame methods to manipulate the data. Take a look at the frame methods .","title":"shape"},{"location":"getting-started/","text":"Getting Started Installation Izuku is available on npm . To install Izuku, run the following command: npm install izuku Basic Usage As defined in Home , the basic usage of Izuku is to create a Frame object and manipulate it. You can use either an 2D array, a JSON Object, or a CSV File to create a Frame . The following example creates a Frame from a 2D array: import { Frame } from 'izuku' ; // alternatively, const { Frame } = require('izuku'); // define some column names as an array const header = [ 'Name' , 'Age' , 'Gender' , 'Country' ]; // define some data as a 2D array const data = [ [ 'Arthur' , 21 , 'Male' , 'USA' ], [ 'Betty' , 20 , 'Female' , 'Canada' ], [ 'Victor' , 25 , 'Male' ], [ 'Dodger' , 30 , 'Male' , 'Canada' ], [ 'Rayan' , 21 , 'Male' , 'Russia' ], [ 'Skitley' , 29 , 'Female' , 'Germany' ], [ 'Victoria' , 89 , 'Female' , 'UK' ], [ 'Tiger' , 23 , 'Male' , 'India' ], [ 'Killjoy' , null , 'Female' , 'Riot' ] ]; // create a frame, header is optional const frame = new Frame ( data , header ); // print the frame frame . show (); The above code creates a frame and prints it to the console. It looks like this: \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 Index \u2502 Name \u2502 Age \u2502 Gender \u2502 Country \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 0 \u2502 Arthur \u2502 21 \u2502 Male \u2502 USA \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 1 \u2502 Betty \u2502 20 \u2502 Female \u2502 Canada \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 2 \u2502 Victor \u2502 25 \u2502 Male \u2502 \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 ... \u2502 ... \u2502 ... \u2502 ... \u2502 ... \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 6 \u2502 Victoria \u2502 89 \u2502 Female \u2502 UK \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 7 \u2502 Tiger \u2502 23 \u2502 Male \u2502 India \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 8 \u2502 Killjoy \u2502 null \u2502 Female \u2502 Riot \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d Now that you have created a frame, take a look at the frame properties .","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#installation","text":"Izuku is available on npm . To install Izuku, run the following command: npm install izuku","title":"Installation"},{"location":"getting-started/#basic-usage","text":"As defined in Home , the basic usage of Izuku is to create a Frame object and manipulate it. You can use either an 2D array, a JSON Object, or a CSV File to create a Frame . The following example creates a Frame from a 2D array: import { Frame } from 'izuku' ; // alternatively, const { Frame } = require('izuku'); // define some column names as an array const header = [ 'Name' , 'Age' , 'Gender' , 'Country' ]; // define some data as a 2D array const data = [ [ 'Arthur' , 21 , 'Male' , 'USA' ], [ 'Betty' , 20 , 'Female' , 'Canada' ], [ 'Victor' , 25 , 'Male' ], [ 'Dodger' , 30 , 'Male' , 'Canada' ], [ 'Rayan' , 21 , 'Male' , 'Russia' ], [ 'Skitley' , 29 , 'Female' , 'Germany' ], [ 'Victoria' , 89 , 'Female' , 'UK' ], [ 'Tiger' , 23 , 'Male' , 'India' ], [ 'Killjoy' , null , 'Female' , 'Riot' ] ]; // create a frame, header is optional const frame = new Frame ( data , header ); // print the frame frame . show (); The above code creates a frame and prints it to the console. It looks like this: \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 Index \u2502 Name \u2502 Age \u2502 Gender \u2502 Country \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 0 \u2502 Arthur \u2502 21 \u2502 Male \u2502 USA \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 1 \u2502 Betty \u2502 20 \u2502 Female \u2502 Canada \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 2 \u2502 Victor \u2502 25 \u2502 Male \u2502 \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 ... \u2502 ... \u2502 ... \u2502 ... \u2502 ... \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 6 \u2502 Victoria \u2502 89 \u2502 Female \u2502 UK \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 7 \u2502 Tiger \u2502 23 \u2502 Male \u2502 India \u2551 \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \u2551 8 \u2502 Killjoy \u2502 null \u2502 Female \u2502 Riot \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d Now that you have created a frame, take a look at the frame properties .","title":"Basic Usage"},{"location":"helper-methods/","text":"Helper Methods Helper methods are methods that are used to help you with some common tasks. They are not chainable. They are not required to use the frame methods. range() range() is a helper method that is used to create a an array of numbers. Here are the arguments and their default values: Argument Description Default Value start The start of the range Required end The end of the range Required step The step size of the range 1 remove An array of numbers which should not be included in the range undefined Note: The step and remove arguments are optional. If you do not provide it, step will be set to 1 and remove will be set to undefined . Example range ( 0 , 10 ); // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] range ( 0 , 10 , 2 ); // [0, 2, 4, 6, 8, 10] range ( 0 , 10 , 1 , [ 1 , 3 , 5 , 7 , 9 ]); // [0, 2, 4, 6, 8, 10] Example with frame // Import Frame and range import { Frame , range } from 'izuku' ; // create a frame const frame = new Frame ([[...], [...], ...]); // Get all columns from 2 to 6 const columns = frame . column ( range ( 2 , 6 )); flattenJSON() flattenJSON() is a helper method that is used to flatten a JSON object. Here are the arguments and their default values: Argument Description Default Value json The JSON object to flatten Required Example import { flattenJSON } from 'izuku' ; const flattened = flattenJSON ({ a : { b : { c : 'hello' } } }); // flattened is [ a.b.c: 'hello' ] In order to see how to chain methods, take a look at the Chaining Methods section.","title":"Helper Methods"},{"location":"helper-methods/#helper-methods","text":"Helper methods are methods that are used to help you with some common tasks. They are not chainable. They are not required to use the frame methods.","title":"Helper Methods"},{"location":"helper-methods/#range","text":"range() is a helper method that is used to create a an array of numbers. Here are the arguments and their default values: Argument Description Default Value start The start of the range Required end The end of the range Required step The step size of the range 1 remove An array of numbers which should not be included in the range undefined Note: The step and remove arguments are optional. If you do not provide it, step will be set to 1 and remove will be set to undefined .","title":"range()"},{"location":"helper-methods/#example","text":"range ( 0 , 10 ); // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] range ( 0 , 10 , 2 ); // [0, 2, 4, 6, 8, 10] range ( 0 , 10 , 1 , [ 1 , 3 , 5 , 7 , 9 ]); // [0, 2, 4, 6, 8, 10]","title":"Example"},{"location":"helper-methods/#example-with-frame","text":"// Import Frame and range import { Frame , range } from 'izuku' ; // create a frame const frame = new Frame ([[...], [...], ...]); // Get all columns from 2 to 6 const columns = frame . column ( range ( 2 , 6 ));","title":"Example with frame"},{"location":"helper-methods/#flattenjson","text":"flattenJSON() is a helper method that is used to flatten a JSON object. Here are the arguments and their default values: Argument Description Default Value json The JSON object to flatten Required","title":"flattenJSON()"},{"location":"helper-methods/#example_1","text":"import { flattenJSON } from 'izuku' ; const flattened = flattenJSON ({ a : { b : { c : 'hello' } } }); // flattened is [ a.b.c: 'hello' ] In order to see how to chain methods, take a look at the Chaining Methods section.","title":"Example"}]}